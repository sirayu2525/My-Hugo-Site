<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Hugo Site</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on My Hugo Site</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 26 Apr 2025 18:29:53 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Site</title>
      <link>http://localhost:1313/posts/my-first-site/</link>
      <pubDate>Sat, 26 Apr 2025 18:29:53 +0900</pubDate>
      <guid>http://localhost:1313/posts/my-first-site/</guid>
      <description>&lt;h1 id=&#34;初めてサイトを作ったので共有する&#34;&gt;初めてサイトを作ったので共有する&lt;/h1&gt;&#xA;&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;&#xA;&lt;p&gt;大学にまめちしきなどの情報を取りまとめて、発信している個人のツイッターがある。&#xA;その人に頼まれて、豆知識をまとめる形でサイト制作を依頼された。&lt;/p&gt;&#xA;&lt;h2 id=&#34;採用技術および使用ツール&#34;&gt;採用技術および使用ツール&lt;/h2&gt;&#xA;&lt;p&gt;１００％Next.jsで作成&#xA;VPSにホスティング（今思えばVercelでも良かったかも）&#xA;Supabaseをデータベースとして採用。&#xA;　（Team機能などで部活全体で管理がしやすい。）&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hamubasu.com&#34;&gt;https://hamubasu.com&lt;/a&gt;&#xA;&lt;img src=&#34;./%E3%83%8F%E3%83%A0%E3%83%90%E3%82%B9.png&#34; alt=&#34;hamubasu&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;全体の構造&#34;&gt;全体の構造&lt;/h2&gt;&#xA;&lt;p&gt;コンポーネント開発を基本とする。再利用できるものが多かった。&#xA;&lt;a href=&#34;https://hamubasu.com&#34;&gt;https://hamubasu.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202025-04-16%20135429.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;nextjsについて&#34;&gt;Next.jsについて&lt;/h2&gt;&#xA;&lt;p&gt;AppRouterを採用しました。&#xA;PagesRouterの問題の一つであるバケツリレー（Props Drilling）が起きやすそうな構造。&#xA;(実際は、page.tsxでデータフェッチしてそれをpropsでArticleListのコンポーネントに渡していてバケツリレーしてしまった)&lt;/p&gt;&#xA;&lt;p&gt;サーバー側での処理（データフェッチ等）がメインだったので、ＲＳＣの思想とも合致する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;改善点&#34;&gt;改善点&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;App RouterではServer Componentsでのデータフェッチが利用可能なので、&#xA;できるだけ末端のコンポーネントへデータフェッチをコロケーションすることを推奨しています&#xA;とあるのでpage.tsxでするのはあまりよろしくない。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;RouteHandlerをサーバーサイドで使ってしまっている。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Use Ai</title>
      <link>http://localhost:1313/posts/use-ai/</link>
      <pubDate>Sat, 26 Apr 2025 18:28:09 +0900</pubDate>
      <guid>http://localhost:1313/posts/use-ai/</guid>
      <description>&lt;h1 id=&#34;対話型aiを活用したフルスタックweb開発の進め方-初心者エンジニア向け&#34;&gt;対話型AIを活用したフルスタックWeb開発の進め方 (初心者エンジニア向け)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;対話型aiツールの基本と特徴&#34;&gt;対話型AIツールの基本と特徴&lt;/h2&gt;&#xA;&lt;p&gt;ChatGPT（OpenAI）やGoogle Geminiなどの対話型AIは、人間の言葉で質問や指示を与えるだけでコード作成や情報収集を支援してくれる。たとえばChatGPTに「○○なウェブアプリを作りたい」と相談すれば、必要なフレームワークや手順の提案、具体的なコード例まで返してくれます。GoogleのGeminiも同様にチャット形式でプログラミングの質問に答えたり、関連資料を探してくれるAI​。&#xA;個人的にはChatGPTの方がUIも好きで、良い感じに答えてくれるから好き。&#xA;これらを上手に使うことで、初心者エンジニアでも効率的にフルスタック開発を進められる可能性がある。 （最近は&lt;strong&gt;DeepReasearch&lt;/strong&gt;がアツい）&lt;/p&gt;&#xA;&lt;h2 id=&#34;対話型ai利用時の課題と対策&#34;&gt;対話型AI利用時の課題と対策&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ハルシネーション（幻覚）&#xA;AIは「もっともらしさ」で回答するので、間違うときがある。それをハルシネーションと呼ぶのだが、最近は複数の方法で予防することが可能。&#xA;まずは、プロンプトに、**「間違っている場合はそれを指摘せよ」&lt;strong&gt;を入力すること。これはユーザーが間違っているかもしれないことをAIに学習させないためで、一定の効果が見込まれる。&#xA;次に、AIが間違ったことを出力するのを防ぐ方法が、&lt;/strong&gt;「情報源を示しながら」**と指定すること。&#xA;ChatGPTは優秀なWeb検索機能が備わっているので、すべての情報にソースがあれば自分で確かめに行くことだってできる。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;最新の情報に対応していない&#xA;これは先ほどの情報源の話とも一部重複するが、ChatGPTというものは情報源を示すことは可能だが、そもそもそれが間違ってたらもちろん出力も間違っている。なので、例えば情報の更新が異常に早いAI分野などについてChatGPTに質問すると対応できていないことが多々見受けられる。他にもソースコードに非推奨のモジュールが入っていてエラーを吐くなんてことも少なくない。&#xA;&lt;strong&gt;だからソースコードをコピペするのではなくせめて内容理解はしておこうという話になる。&lt;/strong&gt;&#xA;あとは最新の記事があるのなら、それをAIに参照させるなどしてユーザーの一定の努力でこの問題は解決できるだろう。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;セキュリティリスク、プライバシーリスク、著作権&#xA;これは良く叫ばれていることなので本記事では省略する（&lt;del&gt;一番大事だけど&lt;/del&gt;）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;対話型aiを用いたフルスタック開発の実践フロー&#34;&gt;対話型AIを用いたフルスタック開発の実践フロー&lt;/h2&gt;&#xA;&lt;p&gt;それでは、対話型AIを実際にフルスタックWeb開発で活用する具体的な流れを、ステップごとに解説します。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;作りたいものを決定する (アイデア出し)&#xA;まずは何を作りたいかを明確にしましょう。初心者エンジニアの場合、最初のアイデア出しからAIに頼ることもできます。ChatGPTなどに「〇〇のようなサービスを作りたい」「解決したい課題は△△なんだけど、どんなアプリが考えられる？」といった形で問いかけると、関連するアイデアや機能のブレストを手伝ってくれます。&#xA;例えば「家計簿アプリを作りたい」と伝えれば、「収支入力機能、グラフ表示、レシート読み取り機能はどうか」といった提案を返してくれるでしょう。GeminiやBardも同様に、ユーザーの要件から発想を広げるのが得意です。&#xA;「似たようなサービスの事例はある？」「最新のトレンドは？」と質問すれば、インターネット上の記事から情報を引っ張ってきて教えてくれます。競合サービスや参考になるアプリを調べてくれるので、アイデアの独自性や方向性を定める助けになります。また、すでに何を作るか決まっている場合でも、ChatGPTに「このアイデアで必要になりそうな機能リストを出して」と頼むと漏れがないかチェックできます。ここではなるべく要求を具体的に伝えることがコツです（対象ユーザーは誰か、どんな問題を解決したいか等）。AIは入力が具体的なほど的確な提案を返せるためです。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;詳細を詰める (技術選定・要件整理)&#xA;作りたいものの輪郭が固まったら、次に技術的な詳細や要件を詰めます。どのプログラミング言語やフレームワークを使うべきか、機能の優先順位は何か、といった点です。ここでも対話型AIが頼りになります。例えばChatGPTに「リアクトとエクスプレスで〇〇を作るのと、Laravelで作るのはどちらが適していますか？」と尋ねると、それぞれのメリット・デメリットを比較してくれます。データベースも何を使うべきか比較検討ができるだろう。&#xA;おすすめは何かのフレームワークにあてはめること。Next.jsやFastAPIとか最新の優秀なフレームワークは多数存在するので比較検討するといいでしょう。（最新の場合は先述の課題にもあるようにユーザーの努力が不可欠）&#xA;この段階でアプリの要件定義も始めます。対話型AIに「ユーザーストーリー風に機能要件を列挙して」と依頼すれば、「ユーザーは〇〇できる」「管理者は△△できる」といったリストを作ってくれます。さらに「この要件を満たすために必要なページや画面、APIエンドポイントは何か？」と深掘りすれば、かなり具体的な設計のヒントが得られるでしょう。GeminiのDeep Research機能を使えば、類似サービスの仕様を調査して要件漏れチェックをすることもできます。例えば「他の家計簿アプリにはどんな機能がある？」と詳細リサーチさせ、その結果を自分の要件に反映させるといった使い方です。&#xA;ただ、最後に決めるのは自分の頭です。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;参考サイトや文献を探す&#xA;要件が固まってきたら、実装の参考になるサイトや記事を集めます。これは情報の確実性を上げるのと同時に、自分の成長のためにすることです。&#xA;ChatGPTやGeminiに「〇〇のチュートリアルが載っているサイトは？」「類似プロジェクトのGitHubリポジトリを教えて」と尋ねると、ネット上のリソースを教えてくれることがあります。ChatGPTのDeep Researchなら「公式ドキュメントから詳細を調べてレポートして」といった高度な依頼も可能です。AI自身が複数のサイトをクロールし、必要な情報を要約して提示してくれるので、一つ一つ手動で検索する手間が省けるでしょう。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;注意点: 先述した通り、AIが引用してくれたサイトが必ずしも正確とは限りませんし、記事の日時が古い可能性もあります。フレームワークの最新バージョンでは仕様が変わっていることもあるため、公式ドキュメントを改めて確認する習慣をつけましょう。また、AIが「〇〇というブログで詳しく解説されています【&amp;hellip;】」と示してくれたら、そのURLに実際にアクセスして深く読むことで理解が深まります。AIの要約だけで満足せず、一次情報にも当たることがエンジニアとしての成長につながります。&#xA;やっぱり&lt;strong&gt;理解できる力&lt;/strong&gt;は必要です。身に着けよう。&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;要件定義書・設計書を作成する (知識の保存と整理)&#xA;AIとの対話で得られた知見や決定事項は、必ずドキュメントにまとめておきましょう。&#xA;AIはプロジェクトを忘れたり、誤解をしている可能性があります。そのたびに修正するのは非常に煩わしいので、自分の記憶が新鮮なうちにドキュメントとして一つに要件をまとめてしまいましょう。&#xA;これもAIの助けを借りることができます。「これまでの話を踏まえて要件定義書を書いて」と言えばいい。それに訂正を加えて完成版ver.0.0を作成しましょう。&#xA;これがあればどこのどんなAIであってもある程度理解してくれます。都度修正を加えながら最新バージョンにしましょう。一度まとめた知識は、AIが忘れても再投入すれば復活させられます。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;環境構築&#xA;これが意外と一番躓きやすいポイントかもしれない。（私も何度苦戦させられたことか・・・）&#xA;特にWindowsだと参照できる記事も多くないし最悪かもしれないが、WindowsにはWSL（Windows For Linux）というお助けアイテムがあるのでそれをまずは入れよう。&#xA;それができたらLinux各種コマンドが使えるので、環境構築も圧倒的にしやすい。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;各機能の実装とテスト・デバッグの繰り返し&#xA;下準備が整ったら、いよいよ実装フェーズです。ここからはフロントエンド、バックエンド、データベースなどフルスタックの各層に対して、機能ごとにコードを書いていきます。対話型AIはまさにペアプログラマーとして活用できます。実装したい機能を一つ選び、ChatGPTに「〇〇という機能をこのフレームワークで実装したい。コードを書いて」と依頼すれば、骨組みとなるコードを生成してくれるでしょう。&#xA;いきなり全コードを書いてもらうのではなく、逐一理解とテストを繰り返すことをお勧めします。&#xA;デバッグコードを活用して少しずつ機能を増やしましょう。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;開発サイクル: この実装～テスト～デバッグのサイクルを、小さい機能単位で繰り返していきます。理想はプログラムを小さく作っては動かし、問題があればすぐ修正することです。ChatGPTも小さな要求に分けて使うと効果的です。「まずフォームを表示する部分だけ書いて」→「次にフォーム入力をバリデーションするコードを追加して」と対話を細切れにすると、想定外の大きなコードを一度に生成して収拾がつかなくなるリスクを減らせます。実際にAIを用いた開発を経験したエンジニアからも、「基本をまず動かし、そこに機能を少しずつ肉付けする」という小刻みな進め方がAIとの相性も良いと報告されています。問題が起きた箇所はAIと対話しながら修正し、動いたら次へ、という風に進めるとスムーズです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;さいごに&#34;&gt;さいごに&lt;/h2&gt;&#xA;&lt;p&gt;以上が、私の半年の経験を基にしたAIの基本的な使い方である。&#xA;ここまで読んで気づいた方も多いと思うが、この記事の半分くらいはChatGPTが作っている。私の思考フローと全体の構図と補足情報を与えて、ChatGPTDeepResearchで作らせた後、私が加筆修正している。&lt;/p&gt;&#xA;&lt;p&gt;まあ、AIは実践的かどうかという議論はさておいて、自分の学習のためにはすごく役立つことは間違いないと思う。やっぱり未経験者にとってみたら「何をすればいいか全く分からない」という状況から「何か」を与えてくれるＡＩは神だし、何かを作ったという自信にもつながるし、全体のフローも掴める。全体のフローを掴んだ後、そこから体系的にゼロから学習するのも悪くないように思う（実際私はその立場）。&#xA;&lt;a href=&#34;https://hamubasu.com&#34;&gt;https://hamubasu.com&lt;/a&gt;&#xA;このサイトもコード自体は最初ほとんどＡＩに書いてもらって、そこから自分でカスタマイズしていった。最初ＡＩに書いてもらったときは最新のネクストに対応してなくて適当なコード&lt;del&gt;出してきやがった&lt;/del&gt;出してきたからそれの対応を結局自分で対応した。そういう対応ができるようになるためにも、基礎からの学習は必須であると思う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;新入生へ&lt;/strong&gt;&#xA;私は１回生の夏頃から本格的にプログラミング始めた若輩者ですが、その分初学者の気持ちもよくわかると思います。なんでも質問してください。そしてハッカソンに一緒に行きましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>My First Article</title>
      <link>http://localhost:1313/posts/my-first-article/</link>
      <pubDate>Sat, 26 Apr 2025 10:21:28 +0900</pubDate>
      <guid>http://localhost:1313/posts/my-first-article/</guid>
      <description>&lt;h1 id=&#34;初めての記事&#34;&gt;初めての記事&lt;/h1&gt;&#xA;&lt;p&gt;Hugoで作ってみた。&lt;/p&gt;&#xA;&lt;p&gt;高速でいいね。（MacProのせいかもだけど）&lt;/p&gt;&#xA;&lt;p&gt;マークダウンでかけるのが普通に熱い&lt;/p&gt;&#xA;&lt;p&gt;一応最初のコマンド載せておきます&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;雛形の作成&#xA;hugo new site my-hugo-site&#xA;&#xA;テーマの挿入&#xA;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&#xA;&#xA;リモートリポジトリと紐付け&#xA;git remote add origin https://github.com/sirayu2525/My-Hugo-Site.git&#xA;&#xA;ローカルの現在のブランチを強制的にmainに変更&#xA;git branch -M main&#xA;&#xA;最初のプッシュ&#xA;git add .&#xA;git commit -m &amp;#34;initial commit&amp;#34;&#xA;git push -u origin main&#xA;&#xA;新しい記事の作り方&#xA;hugo new posts/NAME.md&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;きしょいエラーが出た時はリセットしよう&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -r reosources&#xA;rm -r public&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;おすすめ記事&#xA;&lt;a href=&#34;https://juggernautjp.info/getting-started/directory-structure/&#34;&gt;https://juggernautjp.info/getting-started/directory-structure/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
